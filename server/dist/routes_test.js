"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var httpMocks = __importStar(require("node-mocks-http"));
var routes_1 = require("./routes");
describe('routes', function () {
    it('addPoll', function () {
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 400);
        assert.deepStrictEqual(res1._getData(), "missing 'name' parameter");
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Food", options: ["pizza", "burger"] } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 400);
        assert.deepStrictEqual(res2._getData(), "'minutes' are not a number: undefined");
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Food", minutes: -1, options: ["pizza", "burger"] } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 400);
        assert.deepStrictEqual(res3._getData(), "'minutes' are not a positive integer: -1");
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Food", minutes: 1, options: "pizza" } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 400);
        assert.deepStrictEqual(res4._getData(), "options are given in the wrong format");
        var req5 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Drink", minutes: 4, options: ["juice", "lemonade", "soda"] } });
        var res5 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 200);
        assert.deepStrictEqual(res5._getData().poll.pollName, "Favorite Drink");
        var endTime5 = res5._getData().poll.endTime;
        assert.ok(Math.abs(endTime5 - Date.now() - 4 * 60 * 1000) < 50);
        assert.deepStrictEqual(res5._getData().poll.options, ["juice", "lemonade", "soda"]);
        var req6 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Drink", minutes: 5, options: ["water", "coffee", "tea"] } });
        var res6 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 400);
        assert.deepStrictEqual(res6._getData(), "poll for 'Favorite Drink' already exists");
        (0, routes_1.resestForTesting)();
    });
    it('listPoll', function () {
        var req1 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getData(), { polls: [] });
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Drink", minutes: 4, options: ["juice", "lemonade", "soda"] } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 200);
        assert.deepStrictEqual(res2._getData().poll.pollName, "Favorite Drink");
        var endTime2 = res2._getData().poll.endTime;
        assert.ok(Math.abs(endTime2 - Date.now() - 4 * 60 * 1000) < 50);
        assert.deepStrictEqual(res2._getData().poll.options, ["juice", "lemonade", "soda"]);
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Fruit", minutes: 5, options: ["mango", "grape", "berry"] } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.pollName, "Favorite Fruit");
        var endTime3 = res3._getData().poll.endTime;
        assert.ok(Math.abs(endTime3 - Date.now() - 5 * 60 * 1000) < 50);
        assert.deepStrictEqual(res3._getData().poll.options, ["mango", "grape", "berry"]);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Candy", minutes: 3, options: ["skittles", "starburst", "mentos"] } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.pollName, "Favorite Candy");
        var endTime4 = res4._getData().poll.endTime;
        assert.ok(Math.abs(endTime4 - Date.now() - 3 * 60 * 1000) < 50);
        assert.deepStrictEqual(res4._getData().poll.options, ["skittles", "starburst", "mentos"]);
        var req5 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res5 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 200);
        assert.deepStrictEqual(res5._getData().polls.length, 3);
        assert.deepStrictEqual(res5._getData().polls[0].pollName, "Favorite Candy");
        assert.deepStrictEqual(res5._getData().polls[1].pollName, "Favorite Drink");
        assert.deepStrictEqual(res5._getData().polls[2].pollName, "Favorite Fruit");
        (0, routes_1.advanceTimeForTesting)(5 * 60 * 1000 + 50);
        (0, routes_1.resestForTesting)();
    });
    it('getPoll', function () {
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Fruit", minutes: 5, options: ["mango", "grape", "berry"] } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.pollName, "Favorite Fruit");
        var endTime3 = res3._getData().poll.endTime;
        assert.ok(Math.abs(endTime3 - Date.now() - 5 * 60 * 1000) < 50);
        assert.deepStrictEqual(res3._getData().poll.options, ["mango", "grape", "berry"]);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Candy", minutes: 3, options: ["skittles", "starburst", "mentos"] } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.pollName, "Favorite Candy");
        var endTime4 = res4._getData().poll.endTime;
        assert.ok(Math.abs(endTime4 - Date.now() - 3 * 60 * 1000) < 50);
        assert.deepStrictEqual(res4._getData().poll.options, ["skittles", "starburst", "mentos"]);
        var req5 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: {} });
        var res5 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 400);
        assert.deepStrictEqual(res5._getData(), "missing or invalid 'name' parameter");
        var req6 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: { name: "Favorite Season" } });
        var res6 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 400);
        assert.deepStrictEqual(res6._getData(), "no poll with the name 'Favorite Season'");
        var req7 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: { name: "Favorite Fruit" } });
        var res7 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req7, res7);
        assert.strictEqual(res7._getStatusCode(), 200);
        assert.deepStrictEqual(res7._getData().poll.pollName, "Favorite Fruit");
        assert.deepStrictEqual(res7._getData().poll.options, ["mango", "grape", "berry"]);
        (0, routes_1.resestForTesting)();
    });
    it('updatePoll', function () {
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "Favorite Drink", minutes: 4, options: ["juice", "lemonade", "soda"] } });
        var res1 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getData().poll.pollName, "Favorite Drink");
        var endTime1 = res1._getData().poll.endTime;
        assert.ok(Math.abs(endTime1 - Date.now() - 4 * 60 * 1000) < 50);
        assert.deepStrictEqual(res1._getData().poll.options, ["juice", "lemonade", "soda"]);
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/update',
            body: { pollName: "Favorite Drink", voterName: "Jane", chosenOption: "juice" } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.updatePoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 200);
        assert.deepStrictEqual(res2._getData().poll.pollName, "Favorite Drink");
        assert.deepStrictEqual(res2._getData().poll.voterName, "Jane");
        assert.deepStrictEqual(res2._getData().poll.totalVotes, 1);
        assert.deepStrictEqual(res2._getData().poll.optionObj, [{ optionName: 'juice', optionVotes: 1 },
            { optionName: 'lemonade', optionVotes: 0 }, { optionName: 'soda', optionVotes: 0 }]);
        assert.deepStrictEqual(res2._getData().poll.voteObj, [{ voterName: 'Jane', votedFor: 'juice' }]);
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/update',
            body: { pollName: "Favorite Drink", voterName: "Jane", chosenOption: "lemonade" } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.updatePoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.pollName, "Favorite Drink");
        assert.deepStrictEqual(res3._getData().poll.voterName, "Jane");
        assert.deepStrictEqual(res3._getData().poll.totalVotes, 1);
        assert.deepStrictEqual(res3._getData().poll.optionObj, [{ optionName: 'juice', optionVotes: 0 },
            { optionName: 'lemonade', optionVotes: 1 }, { optionName: 'soda', optionVotes: 0 }]);
        assert.deepStrictEqual(res3._getData().poll.voteObj, [{ voterName: 'Jane', votedFor: 'lemonade' }]);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/update',
            body: { pollName: "Favorite Drink", voterName: "Laura", chosenOption: "lemonade" } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.updatePoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.pollName, "Favorite Drink");
        assert.deepStrictEqual(res4._getData().poll.voterName, "Laura");
        assert.deepStrictEqual(res4._getData().poll.totalVotes, 2);
        assert.deepStrictEqual(res4._getData().poll.optionObj, [{ optionName: 'juice', optionVotes: 0 },
            { optionName: 'lemonade', optionVotes: 2 }, { optionName: 'soda', optionVotes: 0 }]);
        assert.deepStrictEqual(res4._getData().poll.voteObj, [{ voterName: 'Laura', votedFor: 'lemonade' }]);
    });
});
//# sourceMappingURL=data:application/json;base64,